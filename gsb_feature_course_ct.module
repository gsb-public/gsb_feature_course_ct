<?php
/**
 * @file
 * Code for the GSB Feature Course CT feature.
 */

include_once 'gsb_feature_course_ct.admin.inc';
include_once 'gsb_feature_course_ct.features.inc';

/**
 * Implements hook_menu().
 */
function gsb_feature_course_ct_menu() {
  $items = array();
  $items['course-import/%'] = array(
    'title' => 'GSB course.',
    'description' => 'GSB course.',
    'page callback' => 'gsb_feature_course_ct_import_subject_all',
    'page arguments' => array(1),
    'access arguments' => array('administer nodes'),
  );   
  $items['admin/config/gsb/course-filters'] = array(
    'title' => 'GSB Course Filters',
    'description' => 'Set filters for Course import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_course_ct_list_filters'),
    'access arguments' => array('administer course filters'),
    'file' => 'gsb_feature_course_ct.admin.inc',
  );
  $items['admin/config/gsb/course-filters/add'] = array(
    'title' => 'Add',
    'description' => 'Add filter for Courses import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_course_ct_edit_filter'),
    'access arguments' => array('administer course filters'),
    'file' => 'gsb_feature_course_ct.admin.inc',    
  );  
  $items['admin/config/gsb/course-filters/%gsb_feature_course_ct_subject_code/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete filter for Courses import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_course_ct_delete_filter', 4),
    'access arguments' => array('administer course filters'),
    'file' => 'gsb_feature_course_ct.admin.inc',    
  );   
  $items['admin/config/gsb/course-filters/%gsb_feature_course_ct_subject_code/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit filter for Courses import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_course_ct_edit_filter', 4),
    'access arguments' => array('administer course filters'),
    'file' => 'gsb_feature_course_ct.admin.inc',    
  );    
  return $items;
}

/**
 * Implements hook_permission().
 */
function gsb_feature_course_ct_permission() {
  return array(
    'administer course filters' => array(
      'title' => t('Administer course filters'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function gsb_feature_course_ct_cron()
{
   gsb_feature_course_ct_import_subject_all();
}

/**
 * Import Courses from the explore courses system for a given 
 * academic year. Example: $acad_year = '20122013';
 */
function gsb_feature_course_ct_import_subject_all($acad_year = NULL) {

  $subjects = _gsb_feature_course_ct_get_subjects();

  // Remove 'ALL' subject in this case, as it is not part 
  // of the explore courses system
  unset($subjects['ALL']);

  // Create feed importer content for each subject
  foreach ($subjects as $subject => $value) {
    gsb_feature_course_ct_import_course($acad_year, $subject);
  }

 return 'gsb_feature_course_ct_import completed';
}

/**
 * Import Courses from the explore courses system
 */
function gsb_feature_course_ct_import_course($acad_year = NULL, $subject = 'ACCT') {

  $url = 'http://explorecourses.stanford.edu/search?view=xml-20130925&filter-coursestatus-Active=on&page=0&q='.$subject.'&academicYear='.$acad_year;
  $xml = simplexml_load_file(rawurlencode($url));

  if ($xml) {
    foreach ($xml->courses->course as $course) {
      // Check if the course exits by comparing year and courseID.
      gsb_feature_course_ct_course_import($course);
    }
  }
}

/**
 * Import a Course
 */
function gsb_feature_course_ct_course_import($course) {

    $subject = (string)$course->subject;
    $code = (string)$course->code;

    // don't import any courses that are in the filter list

    $course_filters = _gsb_feature_course_ct_get_course_filters();

    if ($subject == 'ACCT' && $code == '313') {
      $fred = 'fred';
    }

    if (!empty($course_filters[$subject])) {  
      if (in_array($code, $course_filters[$subject])) {
        return;
      }
    }
    if (!empty($course_filters['ALL'])) {
      if (in_array($code, $course_filters['ALL'])) {
        return;
      }
    }    

    // Split the year field
    $acad_year = explode('-', $course->year);
    $start_year = $acad_year[0]."-01-01";
    $start_date = new DateTime($start_year);

    $end_year = $acad_year[1]."-01-01";
    $end_date = new DateTime($end_year);

    // Check if the course already exists
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course')
      ->fieldCondition('field_course_code', 'value', (string)$course->code)
      ->fieldCondition('field_course_subject', 'value', (string)$course->subject)             
      ->fieldCondition('field_course_start_acad_year', 'value', array($start_year))
      ->fieldCondition('field_course_end_acad_year', 'value', array($end_year));

    $entities = $query->execute();

    if (!empty($entities['node'])) {
      $nid = array_keys($entities['node']);
      $node = node_load(array_shift($nid));
     // echo 'Course updated';
    } else {
       $field_values = array(
          'type' => 'course',
          'uid' => 1,
          'status' => 1,
          'promote' => 0,
       );
       // Create the course
       $node = entity_create('node', $field_values);
    }
    // if the node isn't a course
    if ($node->type != 'course') {
      return;
    }

    // updatet the course node information
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->title->set((string)$course->title);

    $wrapper->field_course_id->set((string)$course->administrativeInformation->courseId);
    $wrapper->field_course_subject->set((string)$course->subject);
    $wrapper->field_course_code->set((string)$course->code);
    $wrapper->field_course_start_acad_year->set($start_date->getTimestamp());
    $wrapper->field_course_end_acad_year->set($end_date->getTimestamp());
    $wrapper->field_body = array(
       'value' => $course->description,
       'format' => 'full_html',
    );
    //$wrapper->field_body->set((string)$course->description); // description input needs to fixed

    $xml_sections = $course->sections;
    $entity_ids = array();

    // update the faculty node id by sunet
    foreach ($xml_sections->section as $section) {

      // update the entity reference for sunet
      if (!empty($section->schedules->schedule->instructors->instructor->sunet)
          && trim($section->schedules->schedule->instructors->instructor->sunet) != '') {

        if (count($section->schedules->schedule->instructors->instructor) > 1) {
          foreach($section->schedules->schedule->instructors->instructor as $instructor) {
            $sunet_id = $instructor->sunet;
            $entity_ids = array_replace(_gsb_feature_course_ct_add_faculty($sunet_id), $entity_ids);
          }
        }
        else {
          $sunet_id = $section->schedules->schedule->instructors->instructor->sunet;
          $entity_ids = array_replace(_gsb_feature_course_ct_add_faculty($sunet_id), $entity_ids);
        }
        
      }
    }

    if (!empty($entity_ids)) {
      $wrapper->field_person_fac_ref->set($entity_ids);
    }
    else {
      $wrapper->field_person_fac_ref->set(NULL);
    }

    // Finally save the entity
    $wrapper->save();
}

/**
 * Get the faculty entity ids having the given sunetid
 */
function _gsb_feature_course_ct_add_faculty($sunet_id) {

  $entity_ids = array();

  // try to locate the sunet from faculty content
  $entity_id = db_select('field_data_field_sunetid', 'su')
    ->fields('su', array('entity_id'))
    ->condition('su.field_sunetid_value',$sunet_id)
    ->condition('su.bundle','faculty')
    ->execute()->fetchField();

  if ($entity_id && !in_array($entity_id, $entity_ids)) {
    $entity_ids[$entity_id] = $entity_id;
  }

  return $entity_ids;
}



