<?php
/**
 * @file
 * Code for the GSB Feature Course CT feature.
 */

include_once 'gsb_feature_course_ct.features.inc';

/**
 * Implements hook_menu().
 */
function gsb_feature_course_ct_menu() {
  $items = array();
  $items['course-import/%'] = array(
    'title' => 'GSB course.',
    'description' => 'GSB course.',
    'page callback' => 'gsb_feature_course_ct_import_subject_all',
    'page arguments' => array(1),
    'access arguments' => array('administer nodes'),
  );   
  $items['admin/config/gsb/course-filters'] = array(
    'title' => 'GSB Course Filters',
    'description' => 'Set filters for Course import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_course_ct_list_filters'),
    'access arguments' => array('administer course filters'),
  );
  $items['admin/config/gsb/course-filters/add'] = array(
    'title' => 'Add',
    'description' => 'Add filter for Courses import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_course_ct_edit_filter'),
    'access arguments' => array('administer course filters'),
  );  
  $items['admin/config/gsb/course-filters/%gsb_feature_course_ct_subject_code/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete filter for Courses import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_course_ct_delete_filter', 4),
    'access arguments' => array('administer course filters'),
  );   
  $items['admin/config/gsb/course-filters/%gsb_feature_course_ct_subject_code/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit filter for Courses import.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_feature_course_ct_edit_filter', 4),
    'access arguments' => array('administer course filters'),
  );    
  return $items;
}

/**
 * Implements hook_permission().
 */
function gsb_feature_course_ct_permission() {
  return array(
    'administer course filters' => array(
      'title' => t('Administer course filters'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function gsb_feature_course_ct_cron()
{
   gsb_feature_course_ct_import_subject_all();
}

/**
 * Import Courses from the explore courses system for a given 
 * academic year. Example: $acad_year = '20122013';
 */
function gsb_feature_course_ct_import_subject_all($acad_year = NULL) {

  $subjects = _gsb_feature_course_ct_get_subjects();

  // Remove 'ALL' subject in this case, as it is not part 
  // of the explore courses system
  unset($subjects['ALL']);

  // Create feed importer content for each subject
  foreach ($subjects as $subject => $value) {
    gsb_feature_course_ct_import_course($acad_year, $subject);
  }

 return 'gsb_feature_course_ct_import completed';
}

/**
 * Import Courses from the explore courses system
 */
function gsb_feature_course_ct_import_course($acad_year = NULL, $subject = 'ACCT') {

  $url = 'http://explorecourses.stanford.edu/search?view=xml-20130925&filter-coursestatus-Active=on&page=0&q='.$subject.'&academicYear='.$acad_year;
  $xml = simplexml_load_file(rawurlencode($url));

  if ($xml) {
    foreach ($xml->courses->course as $course) {
      // Check if the course exits by comparing year and courseID.
      gsb_feature_course_ct_course_import($course);
    }
  }
}

/**
 * Import a Course
 */
function gsb_feature_course_ct_course_import($course) {

    $subject = (string)$course->subject;
    $code = (string)$course->code;

    // don't import any courses that are in the filter list

    $course_filters = _gsb_feature_course_ct_get_course_filters();

    if ($subject == 'ACCT' && $code == '313') {
      $fred = 'fred';
    }

    if (!empty($course_filters[$subject])) {  
      if (in_array($code, $course_filters[$subject])) {
        return;
      }
    }
    if (!empty($course_filters['ALL'])) {
      if (in_array($code, $course_filters['ALL'])) {
        return;
      }
    }    

    // Split the year field
    $acad_year = explode('-', $course->year);
    $start_year = $acad_year[0]."-01-01";
    $start_date = new DateTime($start_year);

    $end_year = $acad_year[1]."-01-01";
    $end_date = new DateTime($end_year);

    // Check if the course already exists
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course')
      ->fieldCondition('field_course_code', 'value', (string)$course->code)
      ->fieldCondition('field_course_subject', 'value', (string)$course->subject)             
      ->fieldCondition('field_course_start_acad_year', 'value', array($start_year))
      ->fieldCondition('field_course_end_acad_year', 'value', array($end_year));

    $entities = $query->execute();

    if (!empty($entities['node'])) {
      $nid = array_keys($entities['node']);
      $node = node_load(array_shift($nid));
     // echo 'Course updated';
    } else {
       $field_values = array(
          'type' => 'course',
          'uid' => 1,
          'status' => 1,
          'promote' => 0,
       );
       // Create the course
       $node = entity_create('node', $field_values);
    }
    // if the node isn't a course
    if ($node->type != 'course') {
      return;
    }

    // updatet the course node information
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->title->set((string)$course->title);

    $wrapper->field_course_id->set((string)$course->administrativeInformation->courseId);
    $wrapper->field_course_subject->set((string)$course->subject);
    $wrapper->field_course_code->set((string)$course->code);
    $wrapper->field_course_start_acad_year->set($start_date->getTimestamp());
    $wrapper->field_course_end_acad_year->set($end_date->getTimestamp());
    $wrapper->field_body = array(
       'value' => $course->description,
       'format' => 'full_html',
    );
    //$wrapper->field_body->set((string)$course->description); // description input needs to fixed

    $xml_sections = $course->sections;
    $entity_ids = array();

    // update the faculty node id by sunet
    foreach ($xml_sections->section as $section) {

      // update the entity reference for sunet
      if (!empty($section->schedules->schedule->instructors->instructor->sunet)
          && trim($section->schedules->schedule->instructors->instructor->sunet) != '') {

        if (count($section->schedules->schedule->instructors->instructor) > 1) {
          foreach($section->schedules->schedule->instructors->instructor as $instructor) {
            $sunet_id = $instructor->sunet;
            $entity_ids = array_replace(_gsb_feature_course_ct_add_faculty($sunet_id), $entity_ids);
          }
        }
        else {
          $sunet_id = $section->schedules->schedule->instructors->instructor->sunet;
          $entity_ids = array_replace(_gsb_feature_course_ct_add_faculty($sunet_id), $entity_ids);
        }
        
      }
    }

    if (!empty($entity_ids)) {
      $wrapper->field_person_fac_ref->set($entity_ids);
    }
    else {
      $wrapper->field_person_fac_ref->set(NULL);
    }

    // Finally save the entity
    $wrapper->save();
}

/**
 * Get the faculty entity ids having the given sunetid
 */
function _gsb_feature_course_ct_add_faculty($sunet_id) {

  $entity_ids = array();

  // try to locate the sunet from faculty content
  $entity_id = db_select('field_data_field_sunetid', 'su')
    ->fields('su', array('entity_id'))
    ->condition('su.field_sunetid_value',$sunet_id)
    ->condition('su.bundle','faculty')
    ->execute()->fetchField();

  if ($entity_id && !in_array($entity_id, $entity_ids)) {
    $entity_ids[$entity_id] = $entity_id;
  }

  return $entity_ids;
}

/**
 * Functions related to Course Filtering 
 */

/**
 * List all Course Filters in table/operations form 
 */
function gsb_feature_course_ct_list_filters($form, &$form_state) {

  $form['addlink'] = array(
    '#type' => 'link',
    '#title' => t('Add filter'),
    '#href' => 'admin/config/gsb/course-filters/add',
  );

  $course_filters = _gsb_feature_course_ct_get_course_filters();

  if (!empty($course_filters)) {

    $rows = array();

    ksort($course_filters);
    _gsb_feature_course_ct_move_all_first($course_filters);

    foreach ($course_filters as $key => $codes) {

      sort($codes);

      foreach($codes as $code) {

        $row = array();

        $row['data'][] = $key;
        $row['data'][] = $code;

        $operations = array();
        $operations['edit'] = array(
          'title' => t('Edit'),
          'href' => 'admin/config/gsb/course-filters/' . $key .'-' . $code . '/edit',
        );
        $operations['delete'] = array(
          'title' => t('Delete'),
          'href' => 'admin/config/gsb/course-filters/' . $key .'-' . $code . '/delete',
        );
        $row['data']['operations'] = array(
          'data' => array(
            '#theme' => 'links',
            '#links' => $operations,
            '#attributes' => array('class' => array('links', 'inline')),
          ),
        );  

        $rows[$key .'-'.$code] = $row;

      }

    }

    $form['table'] = array(
      '#theme' => 'table',
      '#header' => array(
        t('Course Subject'),
        t('Course Code'),
        t('Operations'),
      ),
      '#rows' => $rows,
    );  

  }

  return $form; 
}

/**
 * Validate the subject_code argument 
 */
function gsb_feature_course_ct_subject_code_load($subject_code = null) {
  if ($subject_code != null) {
    $subject = '';
    $code = '';
    list($subject, $code) = explode('-',$subject_code);
    // Check if subject is valid
    $subjects = _gsb_feature_course_ct_get_subjects();
    if (!in_array(str_replace('ALL', 'All', $subject),$subjects)) {
      drupal_set_message(t('Page not found. Subject is invalid.'), 'error', FALSE);
      drupal_goto($path = 'admin/config/gsb/course-filters');
      return FALSE;
    }    
    // Check if code is valid - 3 digits in length 
    if (!is_numeric($code)) {
      drupal_set_message(t('Page not found. Code is invalid.'), 'error', FALSE);
      drupal_goto($path = 'admin/config/gsb/course-filters');      
      return FALSE;
    } 
    else if (strlen($code) != 3)  {
      drupal_set_message(t('Page not found. Code is invalid.'), 'error', FALSE);
      drupal_goto($path = 'admin/config/gsb/course-filters');            
      return FALSE;
    }
    return array(
      'subject' => $subject,
      'code' => $code,
    );     
  }
  return array(
    'subject' => '',
    'code' => '',
  );  
}

/**
 * Edit the Course Filter.
 */
function gsb_feature_course_ct_edit_filter($form, $form_state, $subject_code = array()) {

  $subject = null;
  $code = null;
  if (!empty($subject_code)) {
    $subject = $subject_code['subject'];
    $code = $subject_code['code'];
  }

  $form = _gsb_feature_course_ct_get_basic_form();

  if ($subject != null) {
    $form['course_subject']['#default_value'] = $subject;
    $form['course_subject']['#disabled'] = TRUE;      
  }
  
  if ($code != null) {
    $form['course_code']['#default_value'] = $code;    
  }

  if ($subject_code != null) {
    $form['subject_code'] = array(
      '#type' => 'hidden',
      '#value' => implode('-', $subject_code),
    );       
  }  

  $form['#validate'][] = 'gsb_feature_course_ct_edit_filter_validate';   
  $form['#submit'][] = 'gsb_feature_course_ct_edit_filter_submit';    

  return system_settings_form($form, $form_state);
}  

/**
 * Validate the Course Filter Edit form.
 */
function gsb_feature_course_ct_edit_filter_validate($form, &$form_state) {
  $code = $form_state['values']['course_code'];
  // Check if a code has been entered
  if ($code == '') {
    form_set_error('course_code', t('Please set a course code for the filter.'));
  }
  // Check if code is valid - 3 digits in length 
  if (!is_numeric($code)) {
    form_set_error('course_code', t('Course code for the filter must be numeric.'));
  } 
  else if (strlen($code) != 3)  {
    form_set_error('course_code', t('Course code for the filter must be 3 digits in length.'));
  }  
}

/**
 * Save the Course Filter.
 */
function gsb_feature_course_ct_edit_filter_submit($form, &$form_state) {

  $subject = $form_state['values']['course_subject'];
  $code = $form_state['values']['course_code'];

  if (!empty($form_state['values']['subject_code'])) {
    // get the subject and previous code
    $subject_code = $form_state['values']['subject_code'];
    list($subject, $old_code) = explode('-',$subject_code);
    // delete the old code
    _gsb_feature_course_ct_delete_filter_code($subject, $old_code);
  }

  // add the new code
  _gsb_feature_course_ct_add_filter_code($subject, $code);

  $form_state['redirect'] = array('admin/config/gsb/course-filters');

}

/**
 * Delete the Course Filter.
 */                                         
function gsb_feature_course_ct_delete_filter($form, $form_state, $subject_code = array()) {

  $question = t('Are you sure you want to delete this filter?');
  $destination = 'admin/config/gsb/course-filters';

  if (!empty($subject_code)) {
    $form['subject_code'] = array(
      '#type' => 'value',
      '#value' => $subject_code,
    );            
  }

  return confirm_form($form, NULL, $destination, $question, t('Delete'), t('Cancel'));
}  

function gsb_feature_course_ct_delete_filter_submit($form, &$form_state) {

  if (!empty($form_state['values']['subject_code'])) {
    // delete the code
    _gsb_feature_course_ct_delete_filter_code(
      $form_state['values']['subject_code']['subject'],
      $form_state['values']['subject_code']['code']
    );
  }

  $form_state['redirect'] = array('admin/config/gsb/course-filters');

}  

/**
 * Add the filter code 
 */
function _gsb_feature_course_ct_add_filter_code($subject, $code) {

  $course_filters = _gsb_feature_course_ct_get_course_filters();

  if(!empty($course_filters[$subject])) {
    $course_filters[$subject] = array_unique (array_merge($course_filters[$subject], array($code)));
  }
  else {
    $course_filters[$subject] = array($code);
  }

  _gsb_feature_course_ct_set_course_filters($course_filters);
}

/**
 * Delete the filter code 
 */
function _gsb_feature_course_ct_delete_filter_code($subject, $code) {

  $course_filters = _gsb_feature_course_ct_get_course_filters();

  if (!empty($course_filters[$subject])) {
    $codes = $course_filters[$subject];
    foreach($course_filters[$subject] as $key => $value) {
      if ($value == $code) {
        unset($codes[$key]);
        break;
      }    
    }  
    $course_filters[$subject] = $codes;
  }

  _gsb_feature_course_ct_set_course_filters($course_filters);
}  

/**
 * Create the basic fields for the edit form
 */
function _gsb_feature_course_ct_get_basic_form() {

  $form = array();

  $subjects = _gsb_feature_course_ct_get_subjects();

  $form['course_subject'] = array(
    '#type' => 'select',
    '#title' => t('Select Course Subject'),
    '#options' => $subjects,
    '#description' => t('Select which course subject that will be used in the filter.')
  );  

  $form['course_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Course Code'),
    '#required' => TRUE,
    '#description' => t('Set the course code that will be used in the filter.')
  );    

  return $form;
}  

/**
 * Modify the order of the listing 
 */
function _gsb_feature_course_ct_move_all_first(&$course_filters) {

  // We move the items marked with the 'all' subject to the top 
  // of the listed items, since these have global impact and 
  // therefore have more importance

  if (!empty($course_filters['ALL'])) {
    $all = $course_filters['ALL'];
    unset($course_filters['ALL']);
    $temp = array();
    $temp['ALL'] = $all;
    $course_filters = $temp + $course_filters;
  } 

}

/**
 * List of subjects
 */
function _gsb_feature_course_ct_get_subjects() {
  $subjects = array(
    'ALL' => 'All',
    'ACCT' => 'ACCT',
    'FINANCE' => 'FINANCE',
    'GSBGEN' => 'GSBGEN',
    'HRMGT' => 'HRMGT',
    'MGTECON' => 'MGTECON',    
    'MKTG' => 'MKTG',
    'OB' => 'OB',    
    'OIT' => 'OIT',
    'POLECON' => 'POLECON',
    'STRAMGT' => 'STRAMGT',
  );  
  return $subjects;  
}

function _gsb_feature_course_ct_get_course_filters() {
  return variable_get('gsb_course_ct_filters', array());
}

function _gsb_feature_course_ct_set_course_filters($value) {
  return variable_set('gsb_course_ct_filters', $value);
}



